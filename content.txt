Please note that the specifications and other information contained herein are not final and are subject to change. The information is being made available to you solely for purpose of evaluation.
OverviewPackageClassUseTreeDeprecatedIndexHelpJava™ Platform
Standard Ed. 7
DRAFT ea-b123PREV CLASSNEXT CLASSFRAMESNO FRAMESAll ClassesSUMMARY: NESTED | FIELD | CONSTR | METHODDETAIL: FIELD | CONSTR | METHOD
java.net
Class DatagramSocket
java.lang.Object
java.net.DatagramSocket
All Implemented Interfaces:
Closeable, AutoCloseable
Direct Known Subclasses:
MulticastSocket

public class DatagramSocket
extends Object
implements Closeable
This class represents a socket for sending and receiving datagram packets.
A datagram socket is the sending or receiving point for a packet delivery service. Each packet sent or received on a datagram socket is individually addressed and routed. Multiple packets sent from one machine to another may be routed differently, and may arrive in any order.

Where possible, a newly constructed DatagramSocket has the SO_BROADCAST socket option enabled so as to allow the transmission of broadcast datagrams. In order to receive broadcast packets a DatagramSocket should be bound to the wildcard address. In some implementations, broadcast packets may also be received when a DatagramSocket is bound to a more specific address.

Example: DatagramSocket s = new DatagramSocket(null); s.bind(new InetSocketAddress(8888)); Which is equivalent to: DatagramSocket s = new DatagramSocket(8888); Both cases will create a DatagramSocket able to receive broadcasts on UDP port 8888.

Since:
JDK1.0
See Also:
DatagramPacket, DatagramChannel
Constructor Summary
Modifier	Constructor and Description
 	DatagramSocket()
Constructs a datagram socket and binds it to any available port on the local host machine.
protected	DatagramSocket(DatagramSocketImpl impl)
Creates an unbound datagram socket with the specified DatagramSocketImpl.
 	DatagramSocket(int port)
Constructs a datagram socket and binds it to the specified port on the local host machine.
 	DatagramSocket(int port, InetAddress laddr)
Creates a datagram socket, bound to the specified local address.
 	DatagramSocket(SocketAddress bindaddr)
Creates a datagram socket, bound to the specified local socket address.
Method Summary
Modifier and Type	Method and Description
void	bind(SocketAddress addr)
Binds this DatagramSocket to a specific address & port.
void	close()
Closes this datagram socket.
void	connect(InetAddress address, int port)
Connects the socket to a remote address for this socket.
void	connect(SocketAddress addr)
Connects this socket to a remote socket address (IP address + port number).
void	disconnect()
Disconnects the socket.
boolean	getBroadcast()
Tests if SO_BROADCAST is enabled.
DatagramChannel	getChannel()
Returns the unique DatagramChannel object associated with this datagram socket, if any.
InetAddress	getInetAddress()
Returns the address to which this socket is connected.
InetAddress	getLocalAddress()
Gets the local address to which the socket is bound.
int	getLocalPort()
Returns the port number on the local host to which this socket is bound.
SocketAddress	getLocalSocketAddress()
Returns the address of the endpoint this socket is bound to.
int	getPort()
Returns the port number to which this socket is connected.
int	getReceiveBufferSize()
Get value of the SO_RCVBUF option for this DatagramSocket, that is the buffer size used by the platform for input on this DatagramSocket.
SocketAddress	getRemoteSocketAddress()
Returns the address of the endpoint this socket is connected to, or null if it is unconnected.
boolean	getReuseAddress()
Tests if SO_REUSEADDR is enabled.
int	getSendBufferSize()
Get value of the SO_SNDBUF option for this DatagramSocket, that is the buffer size used by the platform for output on this DatagramSocket.
int	getSoTimeout()
Retrieve setting for SO_TIMEOUT.
int	getTrafficClass()
Gets traffic class or type-of-service in the IP datagram header for packets sent from this DatagramSocket.
boolean	isBound()
Returns the binding state of the socket.
boolean	isClosed()
Returns whether the socket is closed or not.
boolean	isConnected()
Returns the connection state of the socket.
void	receive(DatagramPacket p)
Receives a datagram packet from this socket.
void	send(DatagramPacket p)
Sends a datagram packet from this socket.
void	setBroadcast(boolean on)
Enable/disable SO_BROADCAST.
static void	setDatagramSocketImplFactory(DatagramSocketImplFactory fac)
Sets the datagram socket implementation factory for the application.
void	setReceiveBufferSize(int size)
Sets the SO_RCVBUF option to the specified value for this DatagramSocket.
void	setReuseAddress(boolean on)
Enable/disable the SO_REUSEADDR socket option.
void	setSendBufferSize(int size)
Sets the SO_SNDBUF option to the specified value for this DatagramSocket.
void	setSoTimeout(int timeout)
Enable/disable SO_TIMEOUT with the specified timeout, in milliseconds.
void	setTrafficClass(int tc)
Sets traffic class or type-of-service octet in the IP datagram header for datagrams sent from this DatagramSocket.
Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Constructor Detail
DatagramSocket
public DatagramSocket()
               throws SocketException
Constructs a datagram socket and binds it to any available port on the local host machine. The socket will be bound to the wildcard address, an IP address chosen by the kernel.
If there is a security manager, its checkListen method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException.

Throws:
SocketException - if the socket could not be opened, or the socket could not bind to the specified local port.
SecurityException - if a security manager exists and its checkListen method doesn't allow the operation.
See Also:
SecurityManager.checkListen(int)
DatagramSocket
protected DatagramSocket(DatagramSocketImpl impl)
Creates an unbound datagram socket with the specified DatagramSocketImpl.
Parameters:
impl - an instance of a DatagramSocketImpl the subclass wishes to use on the DatagramSocket.
Since:
1.4
DatagramSocket
public DatagramSocket(SocketAddress bindaddr)
               throws SocketException
Creates a datagram socket, bound to the specified local socket address.
If, if the address is null, creates an unbound socket.

If there is a security manager, its checkListen method is first called with the port from the socket address as its argument to ensure the operation is allowed. This could result in a SecurityException.

Parameters:
bindaddr - local socket address to bind, or null for an unbound socket.
Throws:
SocketException - if the socket could not be opened, or the socket could not bind to the specified local port.
SecurityException - if a security manager exists and its checkListen method doesn't allow the operation.
Since:
1.4
See Also:
SecurityManager.checkListen(int)
DatagramSocket
public DatagramSocket(int port)
               throws SocketException
Constructs a datagram socket and binds it to the specified port on the local host machine. The socket will be bound to the wildcard address, an IP address chosen by the kernel.
If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.

Parameters:
port - port to use.
Throws:
SocketException - if the socket could not be opened, or the socket could not bind to the specified local port.
SecurityException - if a security manager exists and its checkListen method doesn't allow the operation.
See Also:
SecurityManager.checkListen(int)
DatagramSocket
public DatagramSocket(int port,
              InetAddress laddr)
               throws SocketException
Creates a datagram socket, bound to the specified local address. The local port must be between 0 and 65535 inclusive. If the IP address is 0.0.0.0, the socket will be bound to the wildcard address, an IP address chosen by the kernel.
If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.

Parameters:
port - local port to use
laddr - local address to bind
Throws:
SocketException - if the socket could not be opened, or the socket could not bind to the specified local port.
SecurityException - if a security manager exists and its checkListen method doesn't allow the operation.
Since:
JDK1.1
See Also:
SecurityManager.checkListen(int)
Method Detail
bind
public void bind(SocketAddress addr)
          throws SocketException
Binds this DatagramSocket to a specific address & port.
If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket.

Parameters:
addr - The address & port to bind to.
Throws:
SocketException - if any error happens during the bind, or if the socket is already bound.
SecurityException - if a security manager exists and its checkListen method doesn't allow the operation.
IllegalArgumentException - if addr is a SocketAddress subclass not supported by this socket.
Since:
1.4
connect
public void connect(InetAddress address,
           int port)
Connects the socket to a remote address for this socket. When a socket is connected to a remote address, packets may only be sent to or received from that address. By default a datagram socket is not connected.
If the remote destination to which the socket is connected does not exist, or is otherwise unreachable, and if an ICMP destination unreachable packet has been received for that address, then a subsequent call to send or receive may throw a PortUnreachableException. Note, there is no guarantee that the exception will be thrown.

If a security manager has been installed then it is invoked to check access to the remote address. Specifically, if the given address is a multicast address, the security manager's checkMulticast method is invoked with the given address. Otherwise, the security manager's checkConnect and checkAccept methods are invoked, with the given address and port, to verify that datagrams are permitted to be sent and received respectively.

When a socket is connected, receive and send will not perform any security checks on incoming and outgoing packets, other than matching the packet's and the socket's address and port. On a send operation, if the packet's address is set and the packet's address and the socket's address do not match, an IllegalArgumentException will be thrown. A socket connected to a multicast address may only be used to send packets.

Parameters:
address - the remote address for the socket
port - the remote port for the socket.
Throws:
IllegalArgumentException - if the address is null, or the port is out of range.
SecurityException - if a security manager has been installed and it does not permit access to the given remote address
See Also:
disconnect()
connect
public void connect(SocketAddress addr)
             throws SocketException
Connects this socket to a remote socket address (IP address + port number).
If given an InetSocketAddress, this method behaves as if invoking connect(InetAddress,int) with the the given socket addresses IP address and port number.

Parameters:
addr - The remote address.
Throws:
SocketException - if the connect fails
IllegalArgumentException - if addr is null, or addr is a SocketAddress subclass not supported by this socket
SecurityException - if a security manager has been installed and it does not permit access to the given remote address
Since:
